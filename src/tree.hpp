#pragma once

#include <algorithm>
#include <filesystem>
#include <iostream>
#include <vector>
#include <unordered_map>

namespace fs = std::filesystem;

class Tree {
  size_t dirs;
  size_t files = 0;

  std::vector<std::string> inner_pointers;
  std::vector<std::string> final_pointers; 

  public:
    Tree();
    void walk(std::string directory, std::string prefix);
    void summary();
};


constexpr auto unicode = [](const std::string& str){
  static const std::unordered_map<std::string, std::string> html = {

    {".asm","\uf471"},
    {".c","\ufb70"},
    {".cpp","\ufb71"},
    {".cs","\uf81a"},
    {".css","\uf81b"},
    {".go","\ufcd1"},
    {".h","h"},
    {".hpp","h"},
    {".html","\uf13b"},
    {".java","\uf675"},
    {".js","\ue74e"},
    {".json","\ue60b"},
    {".lua","\ue620"},
    {".md","\uf853"},
    {".ps1","\ufcb5"},
    {".py","\uf81f"},
    {".rs","\ue7a8"},
    {".s","\uf471"},
    {".sh","\ufcb5"},
    {".swift","\ufbe3"},
    {".ter","\ufcb5"},
    {".ts","\ue628"},
    {".xml","\uf72d"},
    {".yaml","\ue60b"},
    {".cmake","\uf425"},

    {"3d","\ue79b"},
    {"actionscript","\ufb25"},
    {"android","\uf531"},
    {"apiblueprint","\uf031"},
    {"applescript","\uf302"},
    {"arch","\uf303"},
    {"arduino","\ue255"},
    {"asciidoc","\uf718"},
    {"assembly","\uf471"},
    {"audio","\ufb75"},
    {"authors","\uf0c0"},
    {"autohotkey","\uf812"},
    {"azure","\ufd03"},
    {"azure-pipelines","\uf427"},
    {"babel","\uf5a0"},
    {"bitbucket","\uf171"},
    {"blink","\uf72a"},
    {"bower","\ue61a"},
    {"c","\ufb70"},
    {"cake","\uf5ea"},
    {"certificate","\uf623"},
    {"changelog","\ufba6"},
    {"clojure","\ue76a"},
    {"coconut","\uf5d2"},
    {"code-climate","\uf7f4"},
    {"codecov","\ue37c"},
    {"codeowners","\uf507"},
    {"coffee","\uf675"},
    {"command","\ufb32"},
    {"commitlint","\ufc16"},
    {"conduct","\uf64b"},
    {"console","\uf68c"},
    {"contributing","\uf64d"},
    {"cpp","\ufb71"},
    {"credits","\uf75f"},
    {"csharp","\uf81a"},
    {"css","\uf81b"},
    {"css-map","\ue749"},
    {"d","\ue7af"},
    {"dart","\ue798"},
    {"database","\ue706"},
    {"deb","\uf306"},
    {"denizenscript","D"},
    {"dhall","\uf448"},
    {"disc","\ue271"},
    {"django","\ue71d"},
    {"docker","\uf308"},
    {"document","\uf718"},
    {"dune","\uf7f4"},
    {"ebuild","\uf30d"},
    {"edge","\uf564"},
    {"ejs","\ue618"},
    {"elixir","\ue62d"},
    {"elm","\ue62c"},
    {"email","\uf6ed"},
    {"erlang","\ue7b1"},
    {"eslint","\ufbf6"},
    {"exe","\uf2d0"},
    {"fastlane","\ufbff"},
    {"favicon","\ue623"},
    {"firebase","\ue787"},
    {"flash","\uf740"},
    {"flatpak","\uf30f"},
    {"font","\uf031"},
    {"fortran","F"},
    {"fsharp","\ue7a7"},
    {"gcp","\uf662"},
    {"gemfile","\ue21e"},
    {"git","\ue702"},
    {"gitlab","\uf296"},
    {"go","\ufcd1"},
    {"godot","\ufba7"},
    {"godot-assets","\ufba7"},
    {"gradle","\ufcc4"},
    {"graphql","\ue284"},
    {"groovy","\uf2a6"},
    {"grunt","\ue611"},
    {"gulp","\ue763"},
    {"h","h"},
    {"handlebars","\ue60f"},
    {"haskell","\ue61f"},
    {"haxe","\uf425"},
    {"helm","\ufd31"},
    {"heroku","\ue607"},
    {"hpp","h"},
    {"html","\uf13b"},
    {"http","\uf484"},
    {"husky","\uf8e8"},
    {"i18n","\uf7be"},
    {"image","\uf71e"},
    {"ini","\uf013"},
    {"ionic","\ue7a9"},
    {"java","\uf675"},
    {"javascript","\ue74e"},
    {"jenkins","\ue767"},
    {"jest","J"},
    {"jinja","\ue000"},
    {"json","\ue60b"},
    {"julia","\ue624"},
    {"karma","\ue622"},
    {"key","\uf805"},
    {"kotlin","\ue70e"},
    {"laravel","\ue73f"},
    {"less","\ue60b"},
    {"lib","\uf831"},
    {"linux","\ue712"},
    {"liquid","\ue275"},
    {"lock","\uf83d"},
    {"log","\uf719"},
    {"lua","\ue620"},
    {"makefile","\uf728"},
    {"manjaro","\uf312"},
    {"markdown","\uf853"},
    {"markojs","\uf13b"},
    {"mdx","\uf853"},
    {"merlin","\uf136"},
    {"mjml","\ue714"},
    {"mocha","\uf6a9"},
    {"modernizr","\ue720"},
    {"moonscript","\uf186"},
    {"mxml","\uf72d"},
    {"mysql","\ue704"},
    {"nim","\uf6a4"},
    {"nix","\uf313"},
    {"nodejs","\uf898"},
    {"npm","\ue71e"},
    {"nuget","\ue77f"},
    {"nuxt","\ue2a6"},
    {"ocaml","\uf1ce"},
    {"opam","\uf1ce"},
    {"opensuse","\uf314"},
    {"pascal","\uf8da"},
    {"pawn","\ue261"},
    {"pdf","\uf724"},
    {"perl","\ue769"},
    {"pkg","\uf30c"},
    {"postcss","\uf81b"},
    {"postgresql","\ue76e"},
    {"powerpoint","\uf726"},
    {"powershell","\ufcb5"},
    {"prettier","\uf8e2"},
    {"prolog","\ue7a1"},
    {"protractor","\uf288"},
    {"pug","\ue60e"},
    {"puppet","\uf595"},
    {"purescript","\uf670"},
    {"python","\uf81f"},
    {"qsharp","\uf292"},
    {"r","\ufcd2"},
    {"raml","\ue60b"},
    {"raspberry-pi","\uf315"},
    {"razor","\uf564"},
    {"react","\ue7ba"},
    {"react_ts","\ue7ba"},
    {"readme","\uf7fb"},
    {"redhat","\uf316"},
    {"roadmap","\ufb6d"},
    {"robot","\ufba7"},
    {"rpm","\uf30a"},
    {"ruby","\ue739"},
    {"rust","\ue7a8"},
    {"sass","\ue603"},
    {"scheme","\ufb26"},
    {"semantic-release","\uf70f"},
    {"shaderlab","\ufbad"},
    {"sketch","\uf6c7"},
    {"slim","\uf24e"},
    {"smarty","\uf834"},
    {"snap","\uf31c"},
    {"solidity","\ufcb9"},
    {"sqlite","\ue7c4"},
    {"storybook","\ufd2c"},
    {"stryker","\uf05b"},
    {"stylelint","\ufb76"},
    {"stylus","\ue600"},
    {"sublime","\ue7aa"},
    {"svg","\ufc1f"},
    {"swc","\ufbd3"},
    {"swift","\ufbe3"},
    {"table","\uf71a"},
    {"tailwindcss","\ufc8b"},
    {"tcl","\ufbd1"},
    {"terraform","\ue20f"},
    {"test-js","\uf595"},
    {"test-jsx","\uf595"},
    {"tex","\uf783"},
    {"todo","\uf058"},
    {"travis","\ue77e"},
    {"tune","\ufb69"},
    {"twig","\ue61c"},
    {"typescript","\ue628"},
    {"typescript-def","\ufbe4"},
    {"url","\uf836"},
    {"vagrant","\uf27d"},
    {"vala","\uf7ab"},
    {"vercel","\uf47e"},
    {"verilog","\ufb19"},
    {"video","\uf72a"},
    {"vim","\ue62b"},
    {"virtual","\uf822"},
    {"visualstudio","\ue70c"},
    {"vscode","\ue70c"},
    {"vue","\ufd42"},
    {"webpack","\ufc29"},
    {"word","\uf72b"},
    {"xaml","\ufb72"},
    {"xml","\uf72d"},
    {"yaml","\ue60b"},
    {"yang","\ufb7e"},
    {"yarn","\uf61a"},
    {"zig","Z"},
    {"zip","\uf410"},
  };

  for(auto var : html){
    if(var.first == str){
      return var.second;
    }
  }

  return std::string{"\uf723"};
};

