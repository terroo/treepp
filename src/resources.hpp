#pragma once

#include <vector>
#include <unordered_map>
#include <string>
#include <tuple>

const std::string TREEPP_VERSION = "tree++ v1.0.1";
const std::string off = "\033[m";

constexpr auto unicode = [](const std::string& str){
  static const std::unordered_map<std::string, std::tuple<std::string, std::string>> html = {

    {".asm", {"\uf471", "\033[38;2;250;109;63m"}}, // mod
    {".c",   {"\ufb70", "\033[38;2;146;140;140m"}},
    {".cpp", {"\ufb71", "\033[38;2;241;81;126m"}},
    {".cs",  {"\uf81a", "\033[38;2;64;135;24m"}},
    {".css", {"\uf81b", "\033[38;2;86;156;214m"}},
    {".go",  {"\ufcd1", "\033[38;2;42;174;216m"}},
    {".h", {"\u2261", "\033[38;2;146;140;140m"}},
    {".hpp", {"\u2261", "\033[38;2;173;151;185m"}},
    {".html", {"\uf13b", "\033[38;2;228;79;57m"}},
    {".java", {"\uf675", "\033[38;2;177;115;31m"}},
    {".js", {"\ue74e", "\033[38;2;241;224;89m"}},
    {".php", {"\ue73d", "\033[38;2;77;92;150m"}},
    {".json", {"\ue60b", "\033[38;2;251;193;60m"}},
    {".lua", {"\ue620", "\033[38;2;8;49;129m"}},
    {".md", {"\uf853", "\033[38;2;8;219;239m"}}, // \033[38;2;169;177;189m
    {".ps1", {"\ufcb5", "\033[38;2;5;169;244m"}},
    {".py", {"\uf81f", "\033[38;2;49;114;166m"}},
    {".rs", {"\ue7a8", "\033[38;2;222;166;133m"}},
    {".rb", {"\ue739", "\033[38;2;176;43;28m"}},
    {".s", {"\uf471", "\033[38;2;110;75;16m"}},
    {".sh", {"\uf68c", "\033[38;2;137;224;79m"}}, // old = ter â†’ \ufcb5
    {".bash", {"\uf68c", "\033[38;2;137;224;79m"}}, // terminal
    {".swift", {"\ufbe3", "\033[38;2;240;79;53m"}},
    {".ter", {"\ufcb5", "\033[38;2;29;151;167m"}},
    {".ts", {"\ue628", "\033[38;2;103;161;224m"}},
    {".xml", {"\uf72d", "\033[38;2;64;153;69m"}},
    {".yaml", {"\ue60b", "\033[38;2;244;68;62m"}},
    {".cmake", {"\uf425", "\033[38;2;178;178;179m"}},
    {".deb", {"\uf306", "\033[38;2;240;85;142m"}},
    {".d", {"\ue7af", "\033[38;2;187;88;93m"}},
    {".dart", {"\ue798", "\033[38;2;87;182;240m"}},
    {".exs", {"\ue62d", "\033[38;2;110;72;37m"}},
    {".clj", {"\ue76a", "\033[38;2;220;86;83m"}},
    {".gd", {"\ufba7", "\033[38;2;79;195;247m"}},
    {".makefile", {"\uf728", "\033[38;2;239;83;80m"}},
    {".pl", {"\ue769", "\033[38;2;31;153;196m"}},
    {".zip", {"\uf410", "\033[38;2;175;180;43m"}},
    {".ini", {"\uf013", "\033[38;2;3;136;209m"}},
    {".svg", {"\ufc1f", "\033[38;2;48;166;154m"}},
    {".vala", {"\uf7ab", "\033[38;2;149;117;205m"}},
    {".tex", {"\uf783", "\033[38;2;66;165;245m"}},
    {".vue", {"\ufd42", "\033[38;2;65;184;131m"}},
    {".vim", {"\ue62b", "\033[38;2;67;160;71m"}},
    {".exe", {"\uf2d0", "\033[38;2;76;175;80m"}},
    {".r", {"\ufcd2", "\033[38;2;25;118;210m"}},
    {".mp3", {"\ufb75", "\033[38;2;239;83;80m"}},
    {".iso", {"\ue271", "\033[38;2;253;154;62m"}},
    {".mp4", {"\ue271", "\033[38;2;253;154;62m"}},
    {".jpg", {"\uf71e", "\033[38;2;45;165;154m"}},
    {".png", {"\uf71e", "\033[38;2;40;160;150m"}},
    {".bmp", {"\uf71e", "\033[38;2;35;155;145m"}},
    {".flac", {"\ufb75", "\033[38;2;200;80;70m"}},
    {".mov", {"\uf72a", "\033[38;2;240;141;54m"}},
    {".mpeg", {"\uf72a", "\033[38;2;236;138;55m"}},
    {".flv", {"\uf72a", "\033[38;2;242;148;59m"}},
    {".ogg", {"\ufb75", "\033[38;2;199;70;67m"}},
    {".ogv", {"\uf72a", "\033[38;2;205;130;57m"}},
    {".rpm", {"\uf30a", "\033[38;2;52;103;172m"}},
    {".ebuild", {"\uf30d", "\033[38;2;148;141;211m"}},
    {".sql", {"\ue704", "\033[38;2;1;94;134m"}},
    {".sqlite", {"\ue7c4", "\033[38;2;1;57;84m"}},
    {".nix", {"\uf313", "\033[38;2;80;117;193m"}},
    {".zig", {"\u2b4d", "\033[38;2;236;146;91m"}}, //ðŸ—²

    // ADD
    {".hs",    {"\ue61f", "\033[38;2;94;80;134m"}},   // Haskell (#5e5086)
    {".kt",    {"\ue70e", "\033[38;2;169;123;255m"}}, // Kotlin (#a97bff)
    {".lisp",  {"\ue791", "\033[38;2;63;182;139m"}},  // Lisp (#3fb68b)
    {".lsp",   {"\ue791", "\033[38;2;63;182;139m"}},  // Lisp (#3fb68b)
    {".el",    {"\u03BB", "\033[38;2;63;182;139m"}},  // Emacs Lisp (#3fb68b)
    {".jl",    {"\ue624", "\033[38;2;162;112;186m"}}, // Julia (#a270ba)
    {".nim",   {"\uf6a4", "\033[38;2;255;233;83m"}},  // Nim (#ffe953)
    {".v",     {"\u0056", "\033[38;2;93;135;189m"}},  // Vlang (#5d87bd)
    {".fs",    {"\ue7a7", "\033[38;2;55;139;186m"}},  // F# (#378bba)
    {".scala", {"\uf313", "\033[38;2;194;45;64m"}},   // Scala (#c22d40)(BASE)
    {".ml",    {"\uf1ce", "\033[38;2;238;106;26m"}},  // OCaml (#ee6a1a)
    {".erl",   {"\ue7b1", "\033[38;2;184;57;152m"}},  // Erlang (#b83998)


  };

  auto it = html.find(str);
  if (it != html.end()) {
    return it->second;
  }

  //return std::tuple<std::string, std::string>{"\uf723", "\033[38;2;255;255;255m"};
  return std::tuple<std::string, std::string>{"\uf723", ""};

};

constexpr auto filename = [](const std::string& str){

  static const std::unordered_map<std::string, std::tuple<std::string, std::string>> html = {
    {"dir", {"\uf74a", "\033[38;2;224;177;77m"}},
    {"bin", {"\uf713", "\033[38;2;76;175;80m"}},
    {"Makefile", {"\uf728", "\033[38;2;239;83;80m"}},
    {"makefile", {"\uf728", "\033[38;2;239;83;80m"}},
    {".gitignore", {"\ue702", "\033[38;2;250;111;66m"}}, // \033[38;2;84;110;122m
    {".git", {"\ue5fb", "\033[38;2;250;111;66m"}},
  };

  auto it = html.find(str);
  if (it != html.end()) {
    return it->second;
  }

  return std::tuple<std::string, std::string>{"\uf723", ""};
};
